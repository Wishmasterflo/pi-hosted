version: '3.4'

services:
  ziti-controller:
    image: openziti/ziti-controller
    restart: unless-stopped
volumes:
  ziti-controller:
    driver: local

networks:
  ziti:
    driver: bridge

services:
  chown-controller:
    image: busybox
    command: chown -R ${ZIGGY_UID:-2171} /ziti-controller
    volumes:
      - ziti-controller:/ziti-controller

  ziti-controller:
    image: ${ZITI_CONTROLLER_IMAGE:-openziti/ziti-controller}
    depends_on:
      chown-controller:
        condition: service_completed_successfully
    user: ${ZIGGY_UID:-2171}
    volumes:
      - ziti-controller:/ziti-controller
    networks:
      ziti:
        aliases:
          - ${ZITI_CTRL_ADVERTISED_ADDRESS:-ziti-controller}
    # assign override vars in an .env file or export from parent env to ensure consistency throughout the compose
    # project
    environment:
      # *** these are the important vars to set to bootstrap the configuration during first run***
      ZITI_CTRL_ADVERTISED_ADDRESS: ${ZITI_CTRL_ADVERTISED_ADDRESS:-ziti-controller}  # FQDN of the controller
      ZITI_CTRL_ADVERTISED_PORT: ${ZITI_CTRL_ADVERTISED_PORT:-1280}                   # TCP port of the controller
      ZITI_PWD: ${ZITI_PWD:-}                                                         # password for the default admin user

      # *** less relevant vars below ***
      ZITI_BOOTSTRAP: true             # bootstrap the controller if "true"
      ZITI_BOOTSTRAP_PKI: true         # make the default PKI if "true"; requires ZITI_BOOTSTRAP=true
      ZITI_BOOTSTRAP_CONFIG: true      # make config file from env vars and defaults if "true," overwrite if "force"; requires           ZITI_BOOTSTRAP=true
      ZITI_BOOTSTRAP_DATABASE: true    # make the default admin user if "true"; requires ZITI_BOOTSTRAP=true
      ZITI_AUTO_RENEW_CERTS: true      # renew certs automatically every startup; requires ZITI_BOOTSTRAP_PKI=true
      ZITI_BOOTSTRAP_CONFIG_ARGS:      # additional arguments to: ziti create config controller

    command: run config.yml
    ports:
      # ensure this port matches the value of ZITI_CTRL_PORT in the container
      - ${ZITI_INTERFACE:-0.0.0.0}:${ZITI_CTRL_ADVERTISED_PORT:-1280}:${ZITI_CTRL_ADVERTISED_PORT:-1280}
    expose:
      - ${ZITI_CTRL_ADVERTISED_PORT:-1280}
    restart: unless-stopped
    healthcheck:
      test:
        - CMD
        - ziti
        - agent
        - stats
      interval: 3s
      timeout: 3s
      retries: 5
      start_period: 15s
  ziti-router:
    image: openziti/ziti-router
    restart: unless-stopped
 volumes:
  ziti-router:
    driver: local

services:
  chown-router:
    image: busybox
    command: chown -R ${ZIGGY_UID:-2171} /ziti-router
    volumes:
      - ziti-router:/ziti-router

  ziti-router:
    image: ${ZITI_ROUTER_IMAGE:-openziti/ziti-router}
    depends_on:
      chown-router:
        condition: service_completed_successfully
    user: ${ZIGGY_UID:-2171}
    volumes:
      - ziti-router:/ziti-router
    # these declared vars pass through to container and should be assigned in an .env file or exported from parent env
    # to ensure consistency throughout the compose project
    environment:
      # *** these are the important vars to set ***
      ZITI_CTRL_ADVERTISED_ADDRESS: ${ZITI_CTRL_ADVERTISED_ADDRESS:-ziti-controller}  # domain name of the controller (required)
      ZITI_CTRL_ADVERTISED_PORT: ${ZITI_CTRL_ADVERTISED_PORT:-1280}                   # exposed port of the controller
      ZITI_ENROLL_TOKEN: ${ZITI_ENROLL_TOKEN:-}                                       # enrollment token for this router (required)
      ZITI_ROUTER_ADVERTISED_ADDRESS: ${ZITI_ROUTER_ADVERTISED_ADDRESS:-ziti-router}  # domain name for this router (default: the container ID [hostname -f])
      ZITI_ROUTER_PORT: ${ZITI_ROUTER_PORT:-3022}                                     # exposed port for this router
      ZITI_ROUTER_MODE: ${ZITI_ROUTER_MODE:-host}                                     # none, host, tproxy, tproxy (default: host, tproxy requires additional config below)

      # *** less relevant vars below ***
      ZITI_BOOTSTRAP: true             # bootstrap the router if "true"
      ZITI_BOOTSTRAP_CONFIG: true      # make config file from env vars and defaults if "true," overwrite if "force"; requires ZITI_BOOTSTRAP=true
      ZITI_BOOTSTRAP_ENROLLMENT: true  # enroll with controller if "true," overwrite if "force"; requires ZITI_BOOTSTRAP=true
      ZITI_AUTO_RENEW_CERTS: true      # renew certs every startup
      ZITI_ROUTER_TYPE: ${ZITI_ROUTER_TYPE:-edge}  # edge or fabric
      ZITI_BOOTSTRAP_CONFIG_ARGS:      # additional arguments to "ziti create config ${ZITI_ROUTER_TYPE:-edge} --tunnelerMode ${ZITI_ROUTER_MODE:-host}"

    command: run config.yml
    ports:
      # ensure this port matches the value of ZITI_ROUTER_PORT in the container
      - ${ZITI_INTERFACE:-0.0.0.0}:${ZITI_ROUTER_PORT:-3022}:${ZITI_ROUTER_PORT:-3022}
    expose:
      - ${ZITI_ROUTER_PORT:-3022}
    restart: unless-stopped
    healthcheck:
      test:
        - CMD
        - ziti
        - agent
        - stats
      interval: 3s
      timeout: 3s
      retries: 5
      start_period: 15s

    # Additional config for other containers using this router as a transparent intercepting proxy sidecar and default
    # nameserver - dns, user, cap_add are required when ZITI_ROUTER_MODE=tproxy (see adjacent README.md for TPROXY
    # example)
    #
    # dns:
    #   - 127.0.0.1  # this router's Ziti resolver
    #   - 1.1.1.1    # any recursive resolver
    # user: root     # required to create TPROXY routes in a container?
    # cap_add:
    #   - NET_ADMIN  # required to create TPROXY rules
  ziti-console:
    image: openziti/zac
    restart: unless-stopped
    command: server
   - binding: zac
        options:
          location: /ziti-console
          indexFile: index.html   
